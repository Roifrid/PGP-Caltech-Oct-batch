Continous Deployment with Docker
=====================================================

Install docker in AWS ec2 server

# yum install docker -y

Start docker service

# systemctl start docker
# systemctl status docker

No need to install docker on lab server
================================================
Install Docker on ubuntu:

sudo apt update

sudo apt install apt-transport-https ca-certificates curl software-properties-common -y

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"

apt-cache policy docker-ce

sudo apt install docker-ce -y

sudo systemctl status docker


Image Name:

===============================

Registryaddress/repository/Imagename:tagname

docker pull tomcat:7

docker pull dockerhub/library/tomcat:latest


Pull images from DockerHub into dockerhost:
======================================

# docker pull ubuntu

# docker pull ubuntu:18.04

Remove an Image:

# docker rmi ubuntu:18.04


Run the image in dockerhost and launch a container

========================================

# docker run ubuntu

Docker list all containers

# docker ps -a




Docker run command options
===========================================

Using docker command run an OS image -> launch a container--> container status should be up & running --> container should have a unique name
=======================================

Foreground Mode:(-it)
=======================
here : i=interactive , t=terminal

Whenver we execute docker run command with foreground mode (-it):

 > A container will be created
 > Container will be up & running
 > user will be logged on to the container (attached to the terminal of the container)

# docker run -it --name cont1 ubuntu

You will be on the container.

Comeout of the container --> keep the container running

Execute CTL pq

Comeout of the container -->  the container should be exited/Stopped

execute  = > exit

Go back into the container OR attach to the terminal of a running container again:

# docker attach containername/id

Restart a exited container:

# docker start containername/id


Delete a container:

 docker rm -f cont1

Delete Images and stopped containers:

 docker system prune --all

Using docker command run an webserver image -> launch a container--> container status should be up & running
=======================================

Detached Mode:(-d)
=======================

Whenver we run docker command with detached mode:

 > A container will be created
 > Container will be up & running
 > user will not be attached to the terminal of to the container

# docker run --name n1 -d nginx

===============================
Attach to the terminal of the container from the host machine:
============================

# docker exec -it <containername> command

# docker exec -it web /bin/bash



Access app running on the Containers from browser of the machine


Port Forwarding OR Port Mapping:
===================================

By default an application on docker container is avaibale on its exposed port.

It is the users internet that cannot reach the container port

For this we have do port forwarding or mapping in docker

i.e. we have to map a VM free system port with container port

example = 8989:80

systemport:containerport

> If a container is already created, we canot do port forwarding for the container

> port forwarding will be applied at the docker run comamnd itself

> flag for port forwarding (-p)

# docker run --name web1 -d -p 8989:80 nginx


> if you want docker to do port mapping then use flag -P

# docker run --name web2 -d -P httpd

=============================================

Docker Volumes:

It is a concept in which we preserve the data of container in the volumes created on docker host

Whenver a containe ris deleted, the data in the container is also lost. In order to overcome this problem, we have docker volumes

Volumes needs to be mounted on the container directory. whatever is there in the container directory will be preserved on the volume directory

Voluems ar eof 2 types:

- named volume
 in this volume a specific name is given to volume directory and volume is created in docker area (/var/lib/docker)

- bind mount
  in this volume the data of the container can be preserved in any directory of the host machine
there is no name given to the volume

Note that: you can use volume to place/copy files on the container directory also.

Volume mapping has to be done, during container runtime.

Named volumes

1. Create a docker volume that will preserve the data of a container

> Create a named volume

# docker volume ls
# docker volume create myvol

> where is the volume created

# docker volume inspect myvol

/var/lib/docker/volumes/myvol/_data

> mount the volume on the container directory

 docker run -it --name cont1 -v myvol:/tmp ubuntu

> preserve data from contaienr to volume

create some files in container and come out of container

> delete container.. data will be there in volume directory

# docker rm -f cont1

# cd /var/lib/docker/volumes/myvol/_data

=============================================

2. Place files from volume on to a container

> go to volume directory, it will have some files

> create a container and mount the volume

docker run -it --name cont1 -v myvol:/tmp ubuntu

> you will observe volume data is there on contaienr sdirectory


try out latter


create a volume and mount on a container1
store some files on the volume
create container2 mapping same volume
make chnages int eh container directory, you wills ee chnages available on second cont also.

==============================================

Bind Mounts:
===================

In this case, data will be saved on any directory of host machine

I have got source code for webapplication in github

https://github.com/Sonal0409/ecomm.git

we will clone the code in docker host in a directory

we will mount the directory on a container with image httpd

We will access the application on the container form browser of our machine
==============================


Dockerfile:
=========================

1. Any image in docker is build form dockerfile

Dockerfile --> Image ---> Container

2. Dockerfile is a text document that contains all the commands/arguments required to build the image

3. A dockerfile structure is :
 
   keyword commands/arguments

4. Docker file is not written using any programming/scripting language. It just has key value


The various keywords used in Dockerfile:
=================================

1. FROM keyword
===========================

In a dockerfile first keyword will always be FROM.
This keyword will only come once in the begining. We dont repeat this

Purpose:
========
Any custom Images or docker hub images are always based upon a Docker Official Base Image

You dont build an image form scratch

Only docker developers use an Image with name as Scratch for OS images

Example:

FROM ubuntu

2. RUN keyword
=========================

> This is most commonly used keyword
> This can be repeated several times in the dockerfile
> This keyword specifies 
	> the set of  Linux commands to be executed on the container when it is launched using your cutome image
  	> Linux command to install packages, upgrade or delete packages on the container
  	> create directory, users groups

3. COPY keyword
========================

> this keyword is used:
  	> when we have copy any type of file from host mahcine to containers directory
	> This keyword cannot copy .tar files (archive file)


4. ADD keyword
=========================
> this keyword is used:
  	> when we have copy any type of file from host mahcine to containers directory
	> It can also copy .tar files (archive file)
 	> this keyword will extract the archive files and copy the files on the container directory
	> this will done when container is launched using custom image

5. CMD keyword
==========================

With this keyowrd:
  > we give a set of commands/arguments whicha re executed once container is launched/running
  > this command should continue to run
  > Command which are used to start an application, to start a server or to run script once container is launched

6. ENV keyword
===========================
Suppose in the dockerfile, you want to defined a variable and value to it -> use keyword ENV
You cna then call variable further inyour dockerfile

Example:

ENV NGINX_VERSION   1.25.3

refer to the varaible in the dockerfile

${NGINX_VERSION}


7. EXPOSE keyword
==============================

Using this keyword you can specify the port number of the container

Example:

EXPOSE 80

8. Volume keyword
===========================

Using this keyword we can specify the directory that will preserve the data of the container on the hostmachine

example:

VOLUME /var/lib/mysql

On the hostmachine the data is preserved in the location : /var/lib/docker/volumes

9. WORKDIR keyword
============================
Using this keyword we can specify the creation of a directory on the container.
Once the directory is created, all the next instruction will be executed in this work directory

10. LABEL keyword
========================

Provide the author details of the dockerfile

Example:
LABEL maintainer="NGINX Docker Maintainers <docker-maint@nginx.com>"


=================================

ALl the keywords are used in dockerfile

he name of the file is always dockerfile or DockerfileT

The command to build dockerfile into an Image:
==========================

You will execute the command in the directory where the dockerfile is. otherwise the command will not be able to find the dockfile and it will fail

#  docker build -t imagename:tagname .

here:

-t = tag the image with a unique name.
Image name will not have upper case alphabet, no specialcharacter
It can have alphabets & numbers

. = In the command . means search for dockerfile in the current directory

 you can also say it is path of the dockerfile

=========================================

We will create dockerfile--> build it into an image for following requirements:
===============================

1. Container should have Ubuntu OS
2. Container should come pre-installed with nginx and git
3. Container should have index.html file copied in nginx director /var/www/html
4. Container should be exposed to port 80
5. Container once launched and is UP , then execute a command to start nginx server

> push Images to dockerhub

Step1 : from Docker host VM login to dockerhub
# docker login

username
password

Step 2: docker push imagename - it will fail as we cannot push in dockerhub library

Step 3: You have to change image name so that it includes the repository name where the image has to be pushed

For every custom image that we have to push, the image name will be as shown below
Imagename => dockerhubusername/imagename:tagname

# docker tag oldimage newImagename

# docker tag mynginx sonal04/mynginx

==========================

Docker network:
======================

Step 1: We will create 2 custom bridge network

net1 net2

Step 2: Create C1 and c2  in network net1

C1 = 172.18.0.2
C2 = 172.18.0.3

C3 = 172.19.0.2

Step 3: Create C3  in network net2

Step 4: Access C2 from C1 using ipaddress of the contaienr or using the name of the container
Observation: as both the container are in same custom network they will able to communicate usign 
	> ipaddress
 	> container name

Step 5:  Access C2 from C3 using ipaddress of the contaienr or using the name of the container
Observation: as the containers are in different custom network they will not be able to communicate  
	> ipaddress
 	> container name

=========================

Docker-compose tool
============================

A Docker-compose tool is mainly used to compose a file which will create multiple container form different images

In Docker-compose tool the name of the compose file is docker-compose.yml

This file is written in YAML

Using Docker-compose tool we can run the compose file and all container will get created at the same

Using Docker-compose tool we can run the compose file to delete all the container 
